Furthermore, since many \proglang{R} users are familiar with \pkg{countreg} or \pkg{VGAM} packages, we have implemented a lightweight extension called \pkg{singleRcaptureExtra}, available through Github (\url{https://github.com/ncn-foreigners/singleRcaptureExtra}), which can be used to integrate \pkg{singleRcapture} with these packages.


# Integration with the \pkg{VGAM, countreg} packages {#sec-vgam short-title="Integration with the"}
As noted at the beginning, we provide an integration with the \pkg{VGAM} and \pkg{countreg} packages via the \pkg{singleRcaptureExtra} package available through Github at \url{https://github.com/ncn-foreigners/singleRcaptureExtra}.

```{r, eval = FALSE}
install.packages("pak")
pak::pak("ncn-foreigners/singleRcaptureExtra")
```

The \pkg{singleRcaptureExtra} makes it possible to convert objects created by \code{vglm, vgam, countreg} functions from packages \pkg{VGAM, countreg} to a \code{singleRStaticCountData} via the respective \code{estimatePopsize} methods for their classes. The help files for all the methods and all the control functions can be accessed by

```{r, eval=FALSE}
?estimatePopsize.vgam
?controlEstPopVgam
```

Below we present how to use the \code{vglm, vgam} class objects for population size estimation. The usage of \code{zerotrunc} class objects is almost exactly analogous. We use additive models with smooth terms for dataset from \cite{chao-generalization}. Note that we use a different dataset than the one presented in the case study since our goal is to show the use of additive models and how it is handled in the \pkg{singleRcapture} package.

```{r, modelVGAM, warning=FALSE, message=FALSE, cache=T}
library(VGAM)
library(singleRcaptureExtra)
modelVgam <- vgam(
  TOTAL_SUB ~ (s(log_size, df  = 3) + s(log_distance, df  = 2)) / C_TYPE,
  data = farmsubmission,
  # Using different link since
  # VGAM uses parametrisation with 1/alpha
  family = posnegbinomial(
    lsize = negloglink
  )
)
```

Estimation of the population size can be accomplished with the following simple syntax.

```{r, singleRcaptureExtra_showcase, cache=TRUE}
modelVgamPop <- estimatePopsize(modelVgam)
```

The resulting object is of class \code{singleRforeign} to indicate that the parameters were estimated outside the \pkg{singleRcapture}. The resulting object consists of the following elements:

```{r, structure-vgam-singleRcapture}
str(modelVgamPop,1)
```

Compare with a similar linear model from base \pkg{singleRcapture}:
\small

```{r, singleRcaptureExtra_compare, cache=TRUE}
modelBase <- estimatePopsize(
  TOTAL_SUB ~ (log_size + log_distance) * C_TYPE,
  data = farmsubmission,
  model = ztnegbin()
)
summary(modelBase)
summary(modelVgamPop)
```

\normalsize

The most important features of \pkg{singleRcapture} such as three types of bootstrap, \code{dfpopsize} and \code{stratifyPopsize} are extended for objects created by calling \code{estimatePopsize} on \code{vglm, vgam, zerotrunc} class object. We direct interested readers to the manual.

## A note on implementation and differences

One possible advantage of using \code{vglm} function from \pkg{VGAM} instead of \code{estimatingPopsize} is that in the latter one cannot fit models of the form analogous to:
\begin{align*}
  \log(\lambda)         &= \beta_{0} + \beta_{1}X_{1},\\
  \text{logit}(\omega)  &= (e^{-e})\beta_{0} + \frac{1}{2}(\beta_{0}+\beta_{1})X_{2},
\end{align*}
for some explanatory variables $X_{1}, X_{2}$.
It is possible to specify many quite "unusual" linear dependencies between elements of a coefficient matrix in the former function since implementation of \pkg{VGAM} allows the user to supply full constraint matrices (cf. @yee2015vgam) while \pkg{singleRcapture} "forces" the user to use formulas. We have decided to limit the number of possible models for the sake of simplicity since these more complicated dependencies seem not to be that frequently used in SSCR. Additionally it is worth remembering that much of the implementation of the most computationally intensive code in \pkg{VGAM} is done in \proglang{C} making the implementation of \code{vglm} faster than that of \code{estimatePopsize}.

An advantage of using \code{estimatingPopsize} to fit the model as compared to calling it on \code{vglm} class object are that:
\begin{itemize}
  \item The former is easier to use.
  \item Many SSCR specific diagnostics are not implemented as methods for \code{vglm} class (though the authors may consider implementing them if the demand is strong enough).
  \item Some important SSCR models such as \code{oizt}$^{\ast}$ models are not implemented in \pkg{VGAM}.
\end{itemize}

Finally \pkg{singleRcapture} and \pkg{VGAM} implementation differ in how the expected information matrixes for negative binomial type distributions are calculated (the latter uses a randomized algorithm where as the former does not).

Comparison between \code{singleRcapture} and \pkg{countreg} is much simpler since as far as SSCR is concerned the latter offers just a small subset of what the former has to offer. In fact the implementation of bootstrap for \code{zerotrunc} uses \code{estimatePopsizeFit} function and not the original implementation which is not the case in \code{vglm, vgam} methods. So one would only use \code{zerotrunc} for fitting the model based on familiarity with the user interface.






\small

```{r, family_function}
myFamilyFunction <- function(lambdaLink = c("logit", "cloglog", "probit"),
                             piLink     = c("logit", "cloglog", "probit"),
                             ...) {
  if (missing(lambdaLink)) lambdaLink <- "logit"
  if (missing(piLink))         piLink <- "logit"

  links <- list()
  attr(links, "linkNames") <- c(lambdaLink, piLink)

  lambdaLink <- switch(lambdaLink,
    "logit"   = singleRcapture:::singleRinternallogitLink,
    "cloglog" = singleRcapture:::singleRinternalcloglogLink,
    "probit"  = singleRcapture:::singleRinternalprobitLink
  )

  piLink <- switch(piLink,
    "logit"   = singleRcapture:::singleRinternallogitLink,
    "cloglog" = singleRcapture:::singleRinternalcloglogLink,
    "probit"  = singleRcapture:::singleRinternalprobitLink
  )

  links[1:2] <- c(lambdaLink, piLink)

  mu.eta <- function(eta, type = "trunc", deriv = FALSE, ...) {
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

    if (!deriv) {
      switch (type,
        "nontrunc" = pi + 2 * lambda,
        "trunc" = 1 + lambda / (pi + lambda)
      )
    } else {
      # Only necessary if one wishes to use standard errors in predict method
      switch (type,
        "nontrunc" = {
          matrix(c(2, 1) * c(
            lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) / 2,
                piLink(eta[, 2], inverse = TRUE, deriv = 1) / 2
          ), ncol = 2)
        },
        "trunc" = {
          matrix(c(
            pi / (pi + lambda) ^ 2,
            -lambda / (pi + lambda) ^ 2
          ) * c(
            lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) / 2,
                piLink(eta[, 2], inverse = TRUE, deriv = 1) / 2
          ), ncol = 2)
        }
      )
    }
  }

  variance <- function(eta, type = "nontrunc", ...) {
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

    switch (type,
    "nontrunc" = pi * (1 - pi) + 4 * lambda * (1 - lambda - pi),
    "trunc" = lambda * (1 - lambda) / (pi + lambda)
    )
  }

  Wfun <- function(prior, y, eta, ...) {
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

    G01 <- ((lambda + pi) ^ (-2)) * piLink(eta[, 2], inverse = TRUE, deriv = 1) *
      lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) * prior / 4

    G00 <- ((lambda + pi) ^ (-2)) - (pi ^ (-2)) - lambda / ((lambda + pi) * (pi ^ 2))
    G00 <- G00 * prior * (piLink(eta[, 2], inverse = TRUE, deriv = 1) ^ 2) / 4

    G11 <- ((lambda + pi) ^ (-2)) - (((lambda + pi) * lambda) ^ -1)
    G11 <- G11 * prior * (lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) ^ 2) / 4

    matrix(
      -c(G11, # lambda
         G01, # mixed
         G01, # mixed
         G00  # pi
      ),
      dimnames = list(rownames(eta), c("lambda", "mixed", "mixed", "pi")),
      ncol = 4
    )
  }

  funcZ <- function(eta, weight, y, prior, ...) {
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

    weight <- weight / prior

    G0 <- (2 - y) / pi     - ((lambda + pi) ^ -1)
    G1 <- (y - 1) / lambda - ((lambda + pi) ^ -1)

    G1 <- G1 * lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) / 2
    G0 <- G0 *     piLink(eta[, 2], inverse = TRUE, deriv = 1) / 2

    uMatrix <- matrix(c(G1, G0), ncol = 2)

    weight <- lapply(X = 1:nrow(weight), FUN = function (x) {
      matrix(as.numeric(weight[x, ]), ncol = 2)
    })

    pseudoResid <- sapply(X = 1:length(weight), FUN = function (x) {
      #xx <- chol2inv(chol(weight[[x]])) # less computationally demanding
      xx <- solve(weight[[x]]) # more stable
      xx %*% uMatrix[x, ]
    })
    pseudoResid <- t(pseudoResid)
    dimnames(pseudoResid) <- dimnames(eta)
    pseudoResid
  }

  minusLogLike <- function(y, X, offset,
                           weight    = 1,
                           NbyK      = FALSE,
                           vectorDer = FALSE,
                           deriv     = 0,
                           ...) {
    y <- as.numeric(y)
    if (is.null(weight)) {
      weight <- 1
    }
    if (missing(offset)) {
      offset <- cbind(rep(0, NROW(X) / 2), rep(0, NROW(X) / 2))
    }

    if (!(deriv %in% c(0, 1, 2)))
      stop("Only score function and derivatives up to 2 are supported.")
    deriv <- deriv + 1

    switch (deriv,
      function(beta) {
        eta <- matrix(as.matrix(X) %*% beta, ncol = 2) + offset
        pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
        lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2
        -sum(weight * ((2 - y) * log(pi) + (y - 1) * log(lambda) - log(pi + lambda)))
      },
      function(beta) {
        eta <- matrix(as.matrix(X) %*% beta, ncol = 2) + offset
        pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
        lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

        G0 <- (2 - y) / pi     - ((lambda + pi) ^ -1)
        G1 <- (y - 1) / lambda - ((lambda + pi) ^ -1)

        G1 <- G1 * weight * lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) / 2
        G0 <- G0 * weight *     piLink(eta[, 2], inverse = TRUE, deriv = 1) / 2

        if (NbyK) {
          XX <- 1:(attr(X, "hwm")[1])
          return(cbind(as.data.frame(X[1:nrow(eta), XX]) * G1,
                       as.data.frame(X[-(1:nrow(eta)), -XX]) * G0))
        }
        if (vectorDer) {
          return(cbind(G1, G0))
        }

        as.numeric(c(G1, G0) %*% X)
      },
      function (beta) {
        lambdaPredNumber <- attr(X, "hwm")[1]
        eta <- matrix(as.matrix(X) %*% beta, ncol = 2) + offset
        pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
        lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

        res <- matrix(nrow = length(beta), ncol = length(beta),
                      dimnames = list(names(beta), names(beta)))

        # pi^2 derivative
        dpi <- (2 - y) / pi - (lambda + pi) ^ -1
        G00 <- ((lambda + pi) ^ (-2)) - (2 - y) / (pi ^ 2)

        G00 <- t(as.data.frame(X[-(1:(nrow(X) / 2)), -(1:lambdaPredNumber)] *
        (G00 * ((piLink(eta[, 2], inverse = TRUE, deriv = 1) / 2) ^ 2) +
        dpi * piLink(eta[, 2], inverse = TRUE, deriv = 2) / 2) * weight)) %*%
        as.matrix(X[-(1:(nrow(X) / 2)), -(1:lambdaPredNumber)])
        # mixed derivative
        G01 <- (lambda + pi) ^ (-2)

        G01 <- t(as.data.frame(X[1:(nrow(X) / 2), 1:lambdaPredNumber]) *
        G01 * (lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) / 2) *
        (piLink(eta[, 2], inverse = TRUE, deriv = 1) / 2) * weight) %*%
        as.matrix(X[-(1:(nrow(X) / 2)), -(1:lambdaPredNumber)])
        # lambda^2 derivative
        G11 <- ((lambda + pi) ^ (-2)) - (y - 1) / (lambda ^ 2)
        dlambda <- (y - 1) / lambda - ((lambda + pi) ^ -1)

        G11 <- t(as.data.frame(X[1:(nrow(X) / 2), 1:lambdaPredNumber] *
        (G11 * ((lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) / 2) ^ 2) +
        dlambda * lambdaLink(eta[, 1], inverse = TRUE, deriv = 2) / 2) * weight)) %*%
        X[1:(nrow(X) / 2), 1:lambdaPredNumber]

        res[-(1:lambdaPredNumber), -(1:lambdaPredNumber)] <- G00
        res[1:lambdaPredNumber, 1:lambdaPredNumber] <- G11
        res[1:lambdaPredNumber, -(1:lambdaPredNumber)] <- t(G01)
        res[-(1:lambdaPredNumber), 1:lambdaPredNumber] <- G01

        res
      }
    )
  }

  validmu <- function(mu) {
    (sum(!is.finite(mu)) == 0) && all(0 < mu) && all(2 > mu)
  }

  # this is optional
  devResids <- function(y, eta, wt, ...) {
    0
  }

  pointEst <- function (pw, eta, contr = FALSE, ...) {
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2
    N <- pw / (lambda + pi)
    if(!contr) {
      N <- sum(N)
    }
    N
  }

  popVar <- function (pw, eta, cov, Xvlm, ...) {
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

    bigTheta1 <- -pw / (pi + lambda) ^ 2 # w.r to pi
    bigTheta1 <- bigTheta1 * piLink(eta[, 2], inverse = TRUE, deriv = 1) / 2
    bigTheta2 <- -pw / (pi + lambda) ^ 2 # w.r to lambda
    bigTheta2 <- bigTheta2 * lambdaLink(eta[, 1], inverse = TRUE, deriv = 1) / 2 # w.r to lambda

    bigTheta <- t(c(bigTheta2, bigTheta1) %*% Xvlm)

    f1 <- t(bigTheta) %*% as.matrix(cov) %*% bigTheta

    f2 <- sum(pw * (1 - pi - lambda) / ((pi + lambda) ^ 2))

    f1 + f2
  }

  dFun <- function (x, eta, type = c("trunc", "nontrunc")) {
    if (missing(type)) type <- "trunc"
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2

    switch (type,
      "trunc" = {
        (pi * as.numeric(x == 1) + lambda * as.numeric(x == 2)) / (pi + lambda)
      },
      "nontrunc" = {
        (1 - pi - lambda) * as.numeric(x == 0) +
        pi * as.numeric(x == 1) + lambda * as.numeric(x == 2)
      }
    )
  }

  simulate <- function(n, eta, lower = 0, upper = Inf) {
    pi     <-     piLink(eta[, 2], inverse = TRUE) / 2
    lambda <- lambdaLink(eta[, 1], inverse = TRUE) / 2
    CDF <- function(x) {
      ifelse(x == Inf, 1,
      ifelse(x < 0, 0,
      ifelse(x < 1, 1 - pi - lambda,
      ifelse(x < 2, 1 - lambda, 1))))
    }
    lb <- CDF(lower)
    ub <- CDF(upper)
    p_u <- stats::runif(n, lb, ub)
    sims <- rep(0, n)
    cond <- CDF(sims) <= p_u
    while (any(cond)) {
      sims[cond] <- sims[cond] + 1
      cond <- CDF(sims) <= p_u
    }
    sims
  }

  getStart <- expression(
    if (method == "IRLS") {
      etaStart <- cbind(
        family$links[[1]](mean(observed == 2) * (1 + 0 * (observed == 2))), # lambda
        family$links[[2]](mean(observed == 1) * (1 + 0 * (observed == 1)))  # pi
      ) + offset
    } else if (method == "optim") {
      init <- c(
        family$links[[1]](weighted.mean(observed == 2, priorWeights) * 1 + .0001),
        family$links[[2]](weighted.mean(observed == 1, priorWeights) * 1 + .0001)
      )
      if (attr(terms, "intercept")) {
        coefStart <- c(init[1], rep(0, attr(Xvlm, "hwm")[1] - 1))
      } else {
        coefStart <- rep(init[1] / attr(Xvlm, "hwm")[1], attr(Xvlm, "hwm")[1])
      }
      if ("(Intercept):pi" %in% colnames(Xvlm)) {
        coefStart <- c(coefStart, init[2], rep(0, attr(Xvlm, "hwm")[2] - 1))
      } else {
        coefStart <- c(coefStart, rep(init[2] / attr(Xvlm, "hwm")[2], attr(Xvlm, "hwm")[2]))
      }
    }
  )

  structure(
    list(
      makeMinusLogLike = minusLogLike,
      densityFunction  = dFun,
      links     = links,
      mu.eta    = mu.eta,
      valideta  = function (eta) {TRUE},
      variance  = variance,
      Wfun      = Wfun,
      funcZ     = funcZ,
      devResids = devResids,
      validmu   = validmu,
      pointEst  = pointEst,
      popVar    = popVar,
      family    = "myFamilyFunction",
      etaNames  = c("lambda", "pi"),
      simulate  = simulate,
      getStart  = getStart,
      extraInfo = c(
        mean       = "pi / 2 + lambda",
        variance   = paste0("(pi / 2) * (1 - pi / 2) + 2 * lambda * (1 - lambda / 2 - pi / 2)"),
        popSizeEst = "(1 - (pi + lambda) / 2) ^ -1",
        meanTr     = "1 + lambda / (pi + lambda)",
        varianceTr = paste0("lambda * (1 - lambda / 2) / (pi + lambda)")
      )
    ),
    class = c("singleRfamily", "family")
  )
}
```

\normalsize

A quick tests shows us that this implementation in fact works:

```{r, family_function_showcase}
set.seed(123)
Y <- simulate(
    myFamilyFunction(lambdaLink = "logit", piLink = "logit"),
    nsim = 1000, eta = matrix(0, nrow = 1000, ncol = 2),
    truncated = FALSE
)
mm <- estimatePopsize(
    formula = Y ~ 1,
    data = data.frame(Y = Y[Y > 0]),
    model = myFamilyFunction(lambdaLink = "logit",
                             piLink = "logit"),
    # the usual observed information matrix
    # is ill-suited for this distribution
    controlPopVar = controlPopVar(covType = "Fisher")
)
summary(mm)
```

where the link functions, such as \code{singleRcapture:::singleRinternalcloglogLink}, are just internal
functions in \pkg{singleRcapture} that compute link functions, their inverses and derivatives of both links and inverse links up to the third order: \small

```{r, link_function}
singleRcapture:::singleRinternalcloglogLink
```

\normalsize

One could, of course, include the code for computing them manually.

