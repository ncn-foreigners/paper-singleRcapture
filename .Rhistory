tinytex::parse_install("singleRcapture/singleRcapture.log")
tlmgr_search('orcidlink.sty')
library(tinytex)
tlmgr_search('orcidlink.sty')
remotes::install_github("ncn-foreigners/singleRcaptureExtra")
citation("distribution3")
citation("distributions3")
library(factor)
library(data.table)
esco <- fread("https://esco.ec.europa.eu/system/files/2023-08/ONET_%28Occupations%29_0_updated.csv")
esco
esco <- fread("https://esco.ec.europa.eu/system/files/2023-08/ONET_%28Occupations%29_0_updated.csv", skip =6)
esco
esco <- fread("https://esco.ec.europa.eu/system/files/2023-08/ONET_%28Occupations%29_0_updated.csv", skip - 13)
esco <- fread("https://esco.ec.europa.eu/system/files/2023-08/ONET_%28Occupations%29_0_updated.csv", skip = 13)
esco
esco <- fread("https://esco.ec.europa.eu/system/files/2023-08/ONET_%28Occupations%29_0_updated.csv", skip = 16)
esco
View(esco)
table(netherlandsimmigrant$capture)
library(singleRcapture)
head(netherlandsimmigrant)
summary(netherlandsimmigrant)
table(netherlandsimmigrant$capture)
basicModel <- estimatePopsize(
formula = capture ~ gender + age + nation,
model   = ztpoisson(),
data    = netherlandsimmigrant
)
summary(basicModel)
set.seed(123456)
modelInflated <- estimatePopsize(
formula = capture ~ nation,
model   = oiztgeom(omegaLink = "cloglog"),
data    = netherlandsimmigrant,
controlModel = controlModel(
omegaFormula = ~ gender + age
),
popVar = "bootstrap",
controlPopVar = controlPopVar(bootType = "semiparametric")
)
summary(modelInflated)
AIC(modelInflated, basicModel)
AIC(modelInflated)
AIC(basicModel)
AIC(modelInflated, basicModel)
sapply(list(modelInflated, basicModel), AIC)
sapply(list(modelInflated, basicModel), BIC)
modelInflated
class(modelInflated)
basicModel
class(basicModel)
(popEst <- popSizeEst(basicModel))
popEst
ls(package::singleRcapture)
ls("package::singleRcapture")
ls("package:singleRcapture")
showMethods(estimatePopsize)
methods(estimatePopsize)
knit_with_parameters("~/mac/nauka/ncn-foreigners/papers/paper-singleRcapture/singleRcapture/singleRcapture.Rmd")
unlink("singleRcapture/singleRcapture_cache", recursive = TRUE)
library(singleRcapture)
head(netherlandsimmigrant)
summary(netherlandsimmigrant)
table(netherlandsimmigrant$capture)
basicModel <- estimatePopsize(
formula = capture ~ gender + age + nation,
model   = ztpoisson(),
data    = netherlandsimmigrant
)
summary(basicModel)
class(basicModel)
modelInflated
(popEst <- popSizeEst(basicModel))
popEst
popEst
str(popEst,1)
dfb <- dfbeta(basicModel)
dfp <- dfpopsize(basicModel, dfbeta = dfb)
summary(dfp)
```{r, marginal_freq_basic_model}
margFreq <- marginalFreq(modelInflated)
summary(margFreq, df = 1, dropl5 = "group")
margFreq <- marginalFreq(basicModel)
summary(margFreq, df = 1, dropl5 = "group")
margFreq_inf <- marginalFreq(modelInflated)
summary(margFreq_inf, df = 1, dropl5 = "group")
plot(basicModel, plotType = "rootogram")
par(mfrow=c(1,2))
plot(basicModel, plotType = "rootogram")
plot(modelInflated, plotType = "rootogram")
par(mfrow=c(1,2))
plot(basicModel, plotType = "rootogram")
plot(modelInflated, plotType = "rootogram")
par(mfrow=c(1,2))
plot(basicModel, plotType = "rootogram")
plot(modelInflated, plotType = "rootogram")
par(mfrow=c(1,2))
plot(basicModel, plotType = "rootogram")
plot(modelInflated, plotType = "rootogram")
par(mfrow=c(1,2))
dfb <- dfbeta(basicModel)
apply(dfb, 2, quantile)
round(apply(dfb, 2, quantile),2)
round(apply(dfb, 2, quantile)*100,2)
t(round(apply(dfb, 2, quantile)*100,2))
dfp <- dfpopsize(basicModel, dfbeta = dfb)
summary(dfp)
dfp
dfp <- dfpopsize(basicModel, dfbeta = dfb)
summary(dfp)
hist(dfp)
dfp <- dfpopsize(basicModel, dfbeta = dfb)
summary(dfp)
t(round(apply(dfb, 2, quantile)*100,4))
plot(basicModel, plotType = "dfpopContr", dfpop = dfp)
par(mar = c(2.5, 8.5, 4.1, 2.5), cex.main = .7, cex.lab = .6)
plot(basicModel, plotType = "strata")
dfp
which.max(dfp)
basicModel
plot(basicModel, plotType = "dfpopContr", dfpop = dfp)
max(dfp)
dfp
which.max(dfp)
max(dfp)
dfp <- dfpopsize(basicModel, dfbeta = dfb)
summary(dfp)
which.max(dfp)
which.min(dfp)
?plot.singleRStaticCountData
par(mfrow=c(1,2))
plot(basicModel, plotType = "rootogram", main = "ZT Poisson model")
plot(modelInflated, plotType = "rootogram", main = "OI ZT Geometric model")
basicModel
netherlandsimmigrant[which.min(dfp), ]
dfb2 <- dfbeta(modelInflated)
dfp2 <- dfpopsize(modelInflated, dfbeta = dfb2)
summary(dfp2)
plot(modelInflated, plotType = "dfpopContr", dfpop = dfp2)
class(stratifyPopsize(basicModel))
stratifyPopsize(basicModel)
stratifyPopsize(basicModel)
stratifyPopsize(basicModel)
pop_size_stratas <- stratifyPopsize(basicModel)
pop_size_stratas
pop_size_stratas[, c("name", "Estimated", "logNormalLowerBound", "logNormalUpperBound")]
pop_size_stratas[, c("name", "Observed", "Estimated", "logNormalLowerBound", "logNormalUpperBound")]
par(mar = c(2.5, 8.5, 4.1, 2.5), cex.main = .7, cex.lab = .6)
plot(basicModel, plotType = "strata")
library(sandwich)
stratifyPopsize(
object  = basicModel,
stratas = ~ gender / (nation + age),
alpha   = rep(c(.1, .2, .3, .4, .5), length.out = 18),
cov     = vcovHC(basicModel, type = "HC4")
)
library(sandwich)
pop_size_stratas_custom <- stratifyPopsize(
object  = basicModel,
stratas = ~ gender / (nation + age),
alpha   = rep(c(.1, .2, .3, .4, .5), length.out = 18),
cov     = vcovHC(basicModel, type = "HC4")
)
pop_size_stratas_custom[, c("name", "Observed", "Estimated", "logNormalLowerBound", "logNormalUpperBound")]
controlPopVar
modelVgamPop <- estimatePopsize(modelVgam)
countreg::zerotrunc
library(VGAM)
library(singleRcaptureExtra)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 3) +
s(log_distance, df  = 2)) / C_TYPE,
data = farmsubmission,
# Using different link since
# VGAM uses parametrisation with 1/alpha
family = posnegbinomial(
lsize = negloglink
)
)
modelVgamPop <- estimatePopsize(modelVgam)
modelVgamPop
summary(modelVgamPop)
modelVgamPop$populationSize
class(modelVgamPop)
str(singleRadditive,1)
str(modelVgamPop,1)
summary(modelBase)
modelBase <- estimatePopsize(
TOTAL_SUB ~ (log_size + log_distance) * C_TYPE,
data = farmsubmission,
model = ztnegbin()
)
summary(modelBase)
summary(modelVgamPop)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 3) + s(log_distance, df  = 2)) / C_TYPE,
data = farmsubmission,
# Using different link since
# VGAM uses parametrisation with 1/alpha
family = posnegbinomial(
lsize = negloglink
)
)
pop_size_stratas <- stratifyPopsize(basicModel)
pop_size_stratas
pop_size_stratas[, c("name", "Observed", "Estimated", "logNormalLowerBound", "logNormalUpperBound")]
head(pop_size_stratas)
pop_size_stratas <- stratifyPopsize(basicModel)
cols <- c("name", "Observed", "Estimated", "logNormalLowerBound", "logNormalUpperBound")
pop_size_stratas[, cols]
pop_size_stratas <- stratifyPopsize(basicModel)
cols <- c("name", "Observed", "Estimated", "logNormalLowerBound",
"logNormalUpperBound")
kable(pop_size_stratas[, cols])
names(pop_size_stratas)
cols <- c("name", "Observed", "Estimated", "logNormalLowerBound",
"logNormalUpperBound")
pop_size_stratas <- stratifyPopsize(basicModel)
cols <- c("name", "Observed", "Estimated", "logNormalLowerBound",
"logNormalUpperBound")
knitr::kable(pop_size_stratas[, cols], col.names = c("Name", "Obs", "Estimated", "LowerBound", "UpperBound"))
texreg::screenreg(basicModel)
texreg::screenreg(basicModel, modelInflated)
texreg::screenreg(list(basic=basicModel, ziotgeom=modelInflated))
modelInflated$dfNull
modelInflated$dfResidual
texreg::screenreg
broom::tidy(basicModel)
broom::tidy(modelInflated)
broom::tidy(modelInflated$populationSize)
modelInflated$populationSize
modelInflated$populationSize
modelInflated$populationSize |> str()
popSizeEst(basicModel)
popSizeEst(basicModel) |> tidy()
popSizeEst(basicModel) |> broom::tidy()
popSizeEst(basicModel)
cols_custom <- c("Name", "Obs", "Estimated", "LowerBound", "UpperBound")
pop_size_stratas <- stratifyPopsize(basicModel)
cols <- c("name", "Observed", "Estimated", "logNormalLowerBound",
"logNormalUpperBound")
cols_custom <- c("Name", "Obs", "Estimated", "LowerBound", "UpperBound")
knitr::kable(pop_size_stratas[, cols],  col.names = cols_custom)
knitr::kable(pop_size_stratas[, cols],  col.names = cols_custom, digits=2)
library(sandwich)
pop_size_stratas_custom <- stratifyPopsize(
object  = basicModel,
stratas = ~ gender / (nation + age),
alpha   = rep(c(.1, .2, .3, .4, .5), length.out = 18),
cov     = vcovHC(basicModel, type = "HC4")
)
knitr::kable(pop_size_stratas_custom[, cols], col.names = cols_custom, digits=2)
?controlPopVar
modelVgamPop$derivFunc
modelVgamPop$populationSize
citaiton("marked")
citation("marked")
install.packages("marked")
citation("marked")
library(sampling)
# a vector of positive numbers
a=1:20
# inclusion probabilities for a sample size n=12
inclusionprobabilities(a,12)
1/ inclusionprobabilities(a,12)
sum(1/inclusionprobabilities(a,12))
sum(a)
data(belgianmunicipalities)
pik=inclusionprobabilities(belgianmunicipalities$Tot04,200)
sum(pik)
sum(1/pik)
library(SamplingBigData)
N <- 1000
n <- 100
x <- cbind( runif(N), runif(N))
set.seed(100)
Cprog <- proc.time()
sampled <- lpm2_kdtree( rep(n/N,N), x)
print("lpm2_kdtree running time")
print(proc.time() - Cprog)
sampled
N <- 1000
n <- 100
x <- matrix(data=runif(N*100), ncol = 100)
set.seed(100)
Cprog <- proc.time()
sampled <- lpm2_kdtree( rep(n/N,N), x)
print("lpm2_kdtree running time")
print(proc.time() - Cprog)
dim(x)
head(x)
N <- 100000
n <- 50000
x <- matrix(data=runif(N*100), ncol = 100)
set.seed(100)
Cprog <- proc.time()
sampled <- lpm2_kdtree( rep(n/N,N), x)
print("lpm2_kdtree running time")
print(proc.time() - Cprog)
library(singleRcapture)
singleRcapture::estimatePopsize.default()
singleRcapture::estimatePopsize.default
singleRcapture::controlPopVar()
data(netherlandsimmigrant)
head(netherlandsimmigrant)
summary(netherlandsimmigrant)
table(netherlandsimmigrant$capture)
basicModel <- estimatePopsize(
formula = capture ~ gender + age + nation,
model   = ztpoisson(),
data    = netherlandsimmigrant
)
summary(basicModel)
basicModel <- estimatePopsize(
formula = capture ~ gender + age + nation,
model   = ztpoisson(),
data    = netherlandsimmigrant
)
summary(basicModel)
set.seed(123456)
modelInflated <- estimatePopsize(
formula = capture ~ nation,
model   = oiztgeom(omegaLink = "cloglog"),
data    = netherlandsimmigrant,
controlModel = controlModel(
omegaFormula = ~ gender + age
),
popVar = "bootstrap",
controlPopVar = controlPopVar(bootType = "semiparametric")
)
summary(modelInflated)
texreg::screenreg(list(modelInflated, basicModel))
modelsummary::modelsummary(list(modelInflated, basicModel))
modelInflated$populationSize
modelInflated$populationSize
str(modelInflated$populationSize,1)
basicModel$populationSize
basicModel$populationSize
modelInflated$populationSize
basicModel$populationSize
modelInflated$populationSize
margFreq <- marginalFreq(basicModel)
summary(margFreq, df = 1, dropl5 = "group")
broom::tidy(margFreq)
margFreq_inf <- marginalFreq(modelInflated)
summary(margFreq_inf, df = 1, dropl5 = "group")
dfb <- dfbeta(basicModel)
t(apply(dfb, 2, quantile)*100)
round(t(apply(dfb, 2, quantile)*100), 4)
head(dfb)
summary(dfb)
dfi <- dfbeta(modelInflated)
round(t(apply(dfi, 2, quantile)*100), 4)
dfi
summary(dfi)
plot(dfi)
summary(dfp)
dfp <- dfpopsize(basicModel, dfbeta = dfb)
summary(dfp)
dfb_pop <- dfpopsize(basicModel, dfbeta = dfb)
dfi_pop <- dfpopsize(basicModel, dfbeta = dfi)
gc()
