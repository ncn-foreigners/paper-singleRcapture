truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "cloglog"),
nsim = 10000, eta = matrix(0, nrow = 10090, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
table(Y)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "cloglog"),
nsim = 10000, eta = matrix(0, nrow = 10090, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
table(Y)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "logit"),
nsim = 10000, eta = matrix(0, nrow = 10090, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
table(Y)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "logit"),
nsim = 10000, eta = matrix(0, nrow = 10090, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
table(Y)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "logit"),
nsim = 1000, eta = matrix(0, nrow = 1000, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
table(Y)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "logit"),
nsim = 1000, eta = matrix(0, nrow = 1000, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
table(Y)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "logit"),
nsim = 1000, eta = matrix(0, nrow = 1000, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "cloglog",
piLink = "probit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
table(Y)
set.seed(123)
Y <- simulate(
myFamilyFunction(lambdaLink = "logit", piLink = "logit"),
nsim = 1000, eta = matrix(0, nrow = 1000, ncol = 2),
truncated = FALSE
)
mm <- estimatePopsize(
formula = Y ~ 1,
data = data.frame(Y = Y[Y > 0]),
model = myFamilyFunction(lambdaLink = "logit",
piLink = "logit"),
controlPopVar = controlPopVar(
# the usual observed information matrix is ill-suited for this distribution
covType = "Fisher"
)
)
summary(mm)
singleRcapture:::singleRinternalcloglogLink
# Implementing custom \pkg{singleRcapture} family function {short-title="Implementing custom singleRcapture family function"}
library(singleRcaptureExtra)
head(farmsubmission)
library(VGAM)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size) + s(log_distance)) * C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink)
)
summary(modelVgam)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size)) * C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink)
)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 2)) * C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink)
)
head(farmsubmission)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 2) + s(log_distance, df  = 2)) / C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink),
trace = TRUE
)
summary(modelVgam)
plot(modelVgam)
?plotvgam
plot(modelVgam, which.cf = 1)
plot(modelVgam, which.cf = 2)
plot(modelVgam, which.cf = 5)
AIC(modelVgam)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 2) + s(log_distance, df  = 3)) / C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink),
trace = TRUE
)
AIC(modelVgam)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 3) + s(log_distance, df  = 2)) / C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink),
trace = TRUE
)
AIC(modelVgam)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 3) + s(log_distance, df  = 2)) / C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink, zero = NULL)
)
modelBase <- estimatePopsize(
TOTAL_SUB ~ (log_size + log_distance) * C_TYPE,
data = farmsubmission,
model = ztnegbin()
)
summary(modelBase)
modelVgamPop
modelVgam
modelVgamPop <- estimatePopsize(modelVgam)
summary(modelBase)
summary(modelVgamPop)
modelBase <- estimatePopsize(
TOTAL_SUB ~ (log_size + log_distance) / C_TYPE,
data = farmsubmission,
model = ztnegbin()
)
summary(modelBase)
modelBase <- estimatePopsize(
TOTAL_SUB ~ (log_size + log_distance) * C_TYPE,
data = farmsubmission,
model = ztnegbin()
)
AIC(modelVgam)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 3) + s(log_distance, df  = 2)) * C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink)
)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 2) + s(log_distance, df  = 2)) * C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink)
)
AIC(modelVgam)
modelVgam <- vgam(
TOTAL_SUB ~ (s(log_size, df  = 3) + s(log_distance, df  = 2)) / C_TYPE,
data = farmsubmission,
family = posnegbinomial(lsize = negloglink)
)
class(modelBase)
?estimatePopsize.vgam
Using the fitted \code{zerotrunc, vglm, vgam} class objects in population size estimation is done with the following syntax:
?s
Compare with a simmilar linear model from base \pkg{singleRcapture}:
?singleRcapture:::plot.singleRStaticCountData
?stratifyPopsize
basicModel <- estimatePopsize(
formula = capture ~ gender + age + nation,
model   = ztpoisson(),
data    = netherlandsimmigrant
)
summary(basicModel)
vcov(basicModel)
vcov(basicModel, type = "Fisher")
vcov(basicModel, type = "observedInform")
sandwich::vcovHC(basicModel)
library(sandwich)
vcovHC(basicModel)
vcovHC(basicModel, type = "HC4")
head(netherlandsimmigrant)
stratifyPopsize(
object  = basicModel,
stratas = ~ nation / (gender + age),
alpha   = .1,
cov     = vcovHC(basicModel, type = "HC4")
)
rep(c(.1, .2, .3, .4, .5), length.out = 30)
stratifyPopsize(
object  = basicModel,
stratas = ~ nation / (gender + age),
alpha   = rep(c(.1, .2, .3, .4, .5), length.out = 30),
cov     = vcovHC(basicModel, type = "HC4")
)
stratifyPopsize(
object  = basicModel,
stratas = ~ gender / (nation + age),
alpha   = rep(c(.1, .2, .3, .4, .5),
length.out = 30),
cov     = vcovHC(basicModel, type = "HC4")
)
stratifyPopsize(
object  = basicModel,
stratas = ~ gender / (nation + age),
alpha   = rep(c(.1, .2, .3, .4, .5),
length.out = 18),
cov     = vcovHC(basicModel, type = "HC4")
)
netherlandsimmigrant
netherlandsimmigrant$nation
x <- sample(c("a", "b"), size = 1000)
x <- sample(c("a", "b"), size = 1000, replace = TRUE)
x
y <- rpois(n = 1000, lambda = .5 * (x == "a") + 1 * (x == "b"))
df <- data.frame(y = y, x = x)
df <- df[df$y > 0, ]
df
summary(df)
mm <- estimatePopsize(
y ~ x,
model = "ztpoisson",
data = df
)
mm
stratifyPopsize(df)
stratifyPopsize(mm)
stratifyPopsize(mm, stratas = "x")
stratifyPopsize(mm, stratas = df$x == "a")
table(x)
mm$coefficients
exp(mm$coefficients[1])
exp(mm$coefficients[1] + mm$coefficients[2])
Hurdle models are another approach to modelling the one-inflation, they can also model deflation as well as both inflation and deflation simultaneously so they are more flexible and situationally the Hurdle zero-truncated models seem to be more numerically stable.
?VGAM::plot.vgam
library(singleRcapture)
knitr::kable(head(netherlandsimmigrant))
basicModel <- estimatePopsize(
formula = capture ~ gender + age + nation,
model   = ztpoisson(),
data    = netherlandsimmigrant
)
summary(basicModel)
dfb <- dfbeta(basicModel)
knitr::kable(as.data.frame(t(round(apply(dfb, 2, quantile)*100,4))))
as.data.frame(t(round(apply(dfb, 2, quantile)*100,4)))
dfb <- dfbeta(basicModel)
knitr::kable(as.data.frame(t(round(apply(dfb, 2, quantile)*100,4))))
dfb <- dfbeta(basicModel)
knitr::kable(as.data.frame(t(round(apply(dfb, 2, quantile)*100,4))))
pop_size_stratas <- stratifyPopsize(basicModel)
cols <- c("name", "Observed", "Estimated", "logNormalLowerBound",
"logNormalUpperBound")
cols_custom <- c("Name", "Obs", "Estimated", "LowerBound", "UpperBound")
knitr::kable(popSizeStratas[, cols],  col.names = cols_custom, digits=2)
popSizeStratas <- stratifyPopsize(basicModel)
knitr::kable(popSizeStratas[, cols],  col.names = cols_custom, digits=2)
library(sandwich)
popSizeStratasCustom <- stratifyPopsize(
object  = basicModel,
stratas = ~ gender / (nation + age),
alpha   = rep(c(.1, .2, .3, .4, .5), length.out = 18),
cov     = vcovHC(basicModel, type = "HC4")
)
knitr::kable(popSizeStratasCustom[, cols], col.names = cols_custom, digits=2)
knitr::kable(head(netherlandsimmigrant))
dfb <- dfbeta(basicModel)
knitr::kable(as.data.frame(t(apply(dfb, 2, quantile)*100)),
col.names = c("0%", "25%", "50%", "75%", "100%"), digits = 4)
knitr::kable(as.data.frame(apply(dfb, 2, quantile)*100),
col.names = c("0", "25", "50", "75", "100"), digits = 4)
knitr::kable(as.data.frame(apply(dfb, 2, quantile)*100), digits = 4)
knitr::kable(t(as.data.frame(apply(dfb, 2, quantile)*100)), digits = 4)
knitr::kable(t(as.data.frame(apply(dfb, 2, quantile)*100)), digits = 4)
?knitr::kable
dfb <- dfbeta(basicModel)
knitr::kable(t(as.data.frame(apply(dfb, 2, quantile)*100)),
format = "latex", digits = 4)
knitr::kable(t(as.data.frame(apply(dfb, 2, quantile)*100)),
format = "latex", digits = 4)
tibble::as_tibble
dfp <- dfpopsize(basicModel, dfbeta = dfb)
knitr::kable(as.data.frame(summary(dfp)))
as.data.frame(summary(dfp))
summary(dfp)
t(summary(dfp))
as.data.frame(t(summary(dfp)))
t(t(summary(dfp)))
as.data.frame(t(t(summary(dfp))))
aa <- summary(dfp)
aa
str(aa)
matrix(aa)
matrix(aa, dimnames = list(1, attr(aa, "names")))
matrix(aa, dimnames = list(attr(aa, "names"), 1))
as.data.frame(matrix(aa, dimnames = list(attr(aa, "names"), 1)))
as.data.frame(t(matrix(aa, dimnames = list(attr(aa, "names"), 1)))
)
table(netherlandsimmigrant$capture)
knitr::knit(table(netherlandsimmigrant$capture))
knitr::knit(table(netherlandsimmigrant$capture) |> as.data.frame())
knitr::knit(as.data.frame(table(netherlandsimmigrant$capture)))
knitr::knit(table(netherlandsimmigrant$capture), col.names = as.character(1:6))
as.data.frame(table(netherlandsimmigrant$capture))
as.data.frame(table(netherlandsimmigrant$capture)[, 2, drop = FALSE])
as.data.frame(table(netherlandsimmigrant$capture))[, 2, drop = FALSE]
t(as.data.frame(table(netherlandsimmigrant$capture))[, 2, drop = FALSE])
knitr::knit(t(as.data.frame(table(netherlandsimmigrant$capture))[, 2, drop = FALSE]),
col.names = as.character(1:6))
knitr::knit(t(as.data.frame(table(netherlandsimmigrant$capture))[, 2, drop = FALSE]),
col.names = as.character(1:6))
knitr::knit(t(as.data.frame(table(netherlandsimmigrant$capture))[, 2, drop = FALSE]))
t(as.data.frame(table(netherlandsimmigrant$capture))[, 2, drop = FALSE])
table(netherlandsimmigrant$capture)
matrix(table(netherlandsimmigrant$capture))
knitr::knit(matrix(table(netherlandsimmigrant$capture)))
knitr::knit(matrix(table(netherlandsimmigrant$capture)),
encoding = "UTF-16")
?readLines
knitr::knit(matrix(table(netherlandsimmigrant$capture)),
encoding = "unknown")
matrix(table(netherlandsimmigrant$capture))
aa <- matrix(table(netherlandsimmigrant$capture))
knitr::knit(aa,
encoding = "unknown")
knitr::knit(aa)
options(encoding = "UTF-8")
knitr::knit(aa)
aa <- matrix(table(netherlandsimmigrant$capture))
knitr::knit(aa)
table(netherlandsimmigrant$capture)
knitr::kable(table(netherlandsimmigrant$capture))
t(knitr::kable(table(netherlandsimmigrant$capture)))
knitr::kable(table(netherlandsimmigrant$capture))
knitr::kable(t(table(netherlandsimmigrant$capture))
)
par(mfrow = c(1, 2))
plot(basicModel, plotType = "rootogram", main = "ZT Poisson model")
set.seed(123456)
modelInflated <- estimatePopsize(
formula = capture ~ nation,
model   = oiztgeom(omegaLink = "cloglog"),
data    = netherlandsimmigrant,
controlModel = controlModel(
omegaFormula = ~ gender + age
),
popVar = "bootstrap",
controlPopVar = controlPopVar(bootType = "semiparametric")
)
plot(modelInflated, plotType = "rootogram", main = "OI ZT Geometric model", add = TRUE)
summary(modelInflated)
par(mfrow = c(1, 2))
plot(basicModel, plotType = "rootogram", main = "ZT Poisson model")
plot(modelInflated, plotType = "rootogram", main = "OI ZT Geometric model", add = TRUE)
plot(modelInflated, plotType = "rootogram", main = "OI ZT Geometric model")
plot(basicModel, plotType = "rootogram", main = "ZT Poisson model", add =TRUE)
par(mfrow = c(2, 1))
plot(   basicModel, plotType = "rootogram", main = "ZT Poisson model")
plot(modelInflated, plotType = "rootogram", main = "OI ZT Geometric model", add = TRUE)
plot(   basicModel, plotType = "rootogram", main = "ZT Poisson model")
plot(modelInflated, plotType = "rootogram", main = "OI ZT Geometric model")
plot(   basicModel, plotType = "rootogram", main = "ZT Poisson model")
plot(modelInflated, plotType = "rootogram", main = "OI ZT Geometric model")
methods::MethodsList("singleRStaticCountData")
?methods::MethodsList("singleRStaticCountData")
methods(class = "singleRStaticCountData")
summary(basicModel)
class(summary(basicModel))
methods(class = "singleRStaticCountData")
methods(class = "summarysingleRStaticCountData")
methods(class = "popSizeEst")
aa <- summary(basicModel)
coef(aa)
?methods(class = "popSizeEst")
ztpoisson()
class(ztpoisson())
?singleRcapture:::simulate.singleRfamily
N <- 10000
###gender <- rbinom(N, 1, 0.2)
gender <- rep(0:1, c(8042, 1958))
eta <- -1 + 0.5*gender
counts <- simulate(ztpoisson(), eta = cbind(eta), seed = 1)
data.frame(gender, eta, counts)
N <- 10000
gender <- rbinom(N, 1, 0.2)
eta <- -1 + 0.5*gender
counts <- simulate(ztpoisson(), eta = cbind(eta), seed = 1)
summary(data.frame(gender, eta, counts))
set.seed(1234567890)
N <- 10000
gender <- rbinom(N, 1, 0.2)
eta <- -1 + 0.5*gender
counts <- simulate(ztpoisson(), eta = cbind(eta), seed = 1)
summary(data.frame(gender, eta, counts))
methods(class = "singleRStaticCountData")
length(methods(class = "singleRStaticCountData"))
singleRcapture:::extractAIC.singleRStaticCountData
singleRcapture:::confint
singleRcapture:::confint.singleRStaticCountData
methods(class = "singleRStaticCountData")
methods(class = "singleRStaticCountData")[-c(1, 2, 3, 4, 9, 10, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 27, 28)]
singleRcapture:::nobs.singleRStaticCountData()
singleRcapture:::nobs.singleRStaticCountData
methods(class = "singleRStaticCountData")[-c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1:13, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1:13, 19, 27, 28)]
singleRcapture:::logLik.singleRStaticCountData
methods(class = "singleRStaticCountData")[-c(1:13, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1:15, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1:17, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1:18, 19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1:19, 27, 28)]
methods(class = "singleRStaticCountData")[-c(1:19, 27:28)]
singleRcapture:::print.singleRStaticCountData
methods(class = "singleRStaticCountData")[-c(1:19, 27:28)]
methods(class = "singleRStaticCountData")[-c(1:21, 27:28)]
singleRcapture:::summary.singleRStaticCountData
methods(class = "singleRStaticCountData")[-c(1:21, 27:28)]
methods(class = "singleRStaticCountData")
?predict
?singleRcapture:::predict.singleRStaticCountData
?singleRcapture:::residuals
?singleRcapture:::residuals.singleRStaticCountData
?redoPopEstimation
citation("VGAM")
?controlMethod
